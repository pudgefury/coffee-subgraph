// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CoffeeChanged extends ethereum.Event {
  get params(): CoffeeChanged__Params {
    return new CoffeeChanged__Params(this);
  }
}

export class CoffeeChanged__Params {
  _event: CoffeeChanged;

  constructor(event: CoffeeChanged) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CoffeeManager extends ethereum.SmartContract {
  static bind(address: Address): CoffeeManager {
    return new CoffeeManager("CoffeeManager", address);
  }

  coffee(param0: Address): BigInt {
    let result = super.call("coffee", "coffee(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_coffee(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("coffee", "coffee(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  index(): BigInt {
    let result = super.call("index", "index():(uint256)", []);

    return result[0].toBigInt();
  }

  try_index(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("index", "index():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerIndex(param0: Address): BigInt {
    let result = super.call("ownerIndex", "ownerIndex(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ownerIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ownerIndex", "ownerIndex(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DrinkCall extends ethereum.Call {
  get inputs(): DrinkCall__Inputs {
    return new DrinkCall__Inputs(this);
  }

  get outputs(): DrinkCall__Outputs {
    return new DrinkCall__Outputs(this);
  }
}

export class DrinkCall__Inputs {
  _call: DrinkCall;

  constructor(call: DrinkCall) {
    this._call = call;
  }
}

export class DrinkCall__Outputs {
  _call: DrinkCall;

  constructor(call: DrinkCall) {
    this._call = call;
  }
}

export class GiveCall extends ethereum.Call {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class MakeCall extends ethereum.Call {
  get inputs(): MakeCall__Inputs {
    return new MakeCall__Inputs(this);
  }

  get outputs(): MakeCall__Outputs {
    return new MakeCall__Outputs(this);
  }
}

export class MakeCall__Inputs {
  _call: MakeCall;

  constructor(call: MakeCall) {
    this._call = call;
  }
}

export class MakeCall__Outputs {
  _call: MakeCall;

  constructor(call: MakeCall) {
    this._call = call;
  }
}
